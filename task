Json
-----

import json

input = """
     "srrg.shared-risk-resource-group": {
        "srrg.fdn": "MD=CISCO_EPNM!SRRG=5242894",
        "srrg.user-label": " CHCO_FSRLG_timestamp",
        "srrg.resource-fdn-list": {
            "srrg.resource-fdn": [
                "MD=CISCO_EPNM!TL=10.10.1.3:[WDMSIDE-B]--10.10.1.4:[WDMSIDE-E]",
                "MD=CISCO_EPNM!TL=10.10.1.3:[WDMSIDE-C]--10.10.1.4:[WDMSIDE-G]"
            ]
        },
        "srrg.status": "OPERATION_SUCCESSFUL",
        "srrg.message": "STATUS:COMPLETED\nSRRGCallcompleted\n"
    }
"""

class JsonParser:
    def __init__(self, json_str):
        json_str = json_str.encode('ascii', 'ignore')
        json_str = json_str.decode('ascii')
        json_str = json_str.replace("\n", " ")
        self.json_str = json_str

    def is_valid_json(self):
        try:
            # self.json_str = self.json_str.replace('\n', '\\n')
            json_object = json.loads(self.json_str)

        except ValueError as e:
            print("Invalid JSON input:", e, "\n")
            return False
        return True

    def make_valid_json(self):
        """
        This function is used to correct the format of json string
        Note: json string format given in the assignment is not valid one
        :return: None
        """

        pattern_1 = """{{ {}  }}"""
        # lets apply pattern_1 and see if json becomes valid
        temp = self.json_str
        print("Trying to correct format & build valid Json string..\n")
        self.json_str = pattern_1.format(self.json_str)

        if self.is_valid_json():
            print("Input string converted to valid Json string..\n")
        else:
            self.json_str = temp
            raise Exception("Json can't be build with available patterns. "
                            "Please upgrade the modules with more patterns")

    def parse_string(self):
        """
        This function will parse the string & returns dict(python obj), json_obj
        :return: python_obj, json_obj
        """

        if not self.is_valid_json():
            self.make_valid_json()
        json_dict = json.loads(self.json_str)
        json_dict = json_dict.get('srrg.shared-risk-resource-group')
        json_dict = {key.replace("srrg.", "").replace("-", "_"): value for key, value in json_dict.items()}
        json_obj = json.dumps(json_dict, indent=2)

        return json_dict, json_obj


if __name__ == "__main__":
    parser = JsonParser(json_str=input)
    output_dict, output_str = parser.parse_string()
    print(f"output_dict: {output_dict}")
    print("*"*100)
    print(f"output_json_str: {output_str}")
